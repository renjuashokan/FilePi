name: Build Go Server

on:
  push:
    branches: 
        - main_go
        - try/*
  pull_request:
    branches:
        - main_go
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            goarch: amd64
            goos: linux
          - arch: arm64
            goarch: arm64
            goos: linux
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.1'
        check-latest: true

    - name: Set artifact name and development version
      id: set-artifact-props
      run: |
        # Get branch name
        if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
          BRANCH_NAME="${GITHUB_HEAD_REF}"
        else
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
        fi
        
        # Clean branch name for artifact naming
        CLEAN_NAME="$(echo "$BRANCH_NAME" | sed -E 's/^(b|feat\/|try\/)//g' | sed -e 's/ /_/g' | sed -e 's/\//_/g')"
        echo "Clean branch name is: $CLEAN_NAME"

        RUN_NUMBER=${{ github.run_number }}
        VERSION="${CLEAN_NAME}_${RUN_NUMBER}"
        
        # Create a Debian-compatible version (must start with a digit)
        DEB_VERSION="1.0.0+${CLEAN_NAME}.${RUN_NUMBER}"
        
        echo "build-name=$VERSION" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "deb-version=$DEB_VERSION" >> $GITHUB_OUTPUT
        
        echo "Using artifact name: filepi-${VERSION}"
        echo "Using version: $VERSION"
        echo "Using Debian version: $DEB_VERSION"

    - name: Get dependencies
      run: go mod download

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Build Go binary
      run: |
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags="-X main.Version=${{ steps.set-artifact-props.outputs.version }}" -o filepi
        
        # Create tarball
        BINARY_NAME="filepi-${{ steps.set-artifact-props.outputs.build-name }}-linux-${{ matrix.arch }}"
        cp filepi ${BINARY_NAME}
        tar -czvf ${BINARY_NAME}.tar.gz ${BINARY_NAME}

    - name: Build Debian package
      run: |
        chmod +x build-deb.sh
        ./build-deb.sh "${{ steps.set-artifact-props.outputs.deb-version }}"
        
        # Rename the deb file to include architecture
        mv outputs/filepi_*.deb filepi_${{ steps.set-artifact-props.outputs.build-name }}_${{ matrix.arch }}.deb

    - name: Upload binary tarball
      uses: actions/upload-artifact@v4
      with:
        name: filepi-${{ steps.set-artifact-props.outputs.build-name }}-linux-${{ matrix.arch }}
        path: filepi-${{ steps.set-artifact-props.outputs.build-name }}-linux-${{ matrix.arch }}.tar.gz
        retention-days: 14

    - name: Upload Debian package
      uses: actions/upload-artifact@v4
      with:
        name: filepi_${{ steps.set-artifact-props.outputs.build-name }}_${{ matrix.arch }}
        path: filepi_${{ steps.set-artifact-props.outputs.build-name }}_${{ matrix.arch }}.deb
        retention-days: 14

  summary:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts
        merge-multiple: true

    - name: List artifacts
      run: |
        echo "The following artifacts have been created:"
        echo "Go binaries:"
        ls -l all-artifacts/*.tar.gz
        echo "Debian packages:"
        ls -l all-artifacts/*.deb